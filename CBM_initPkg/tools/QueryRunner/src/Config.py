# core
import os

class Config(object):
    '''
    Holds global configuration for the application.
    
    :param outputPath: the root directory for storing files generated by scripts
    :type outputPath: str
    :param logPath: the path to store log files in
    :type logPath: str
    :param logQueries: flag controlling the logging of all executed SQL
    :type logQueries: boolean
    :param activeDBs: list of databases to execute queries against
    :type activeDBs: list of :class:`.QueryRunnerDatabase`
    :param overwrite: flag controlling whether or not the working copies of the
        target databases should be overwritten, if they already exist
    :type overwrite: boolean
    '''
    
    def __init__(self, outputPath, logPath, logQueries, activeDBs, overwrite):
        self.__outputPath = outputPath
        self.__logPath = logPath
        self.__logQueries = logQueries
        self.__activeDBs = activeDBs
        self.__overwrite = overwrite


    def __str__(self):
        return """
               [Config]
               Output Path: %(outputPath)s
               Log Path: %(logPath)s
               Log Queries: %(logQueries)s
               Overwrite Working DBs: %(overwrite)s
               Target databases: %(activeDBs)s
               """ % {"outputPath": self.__outputPath,
                      "logPath"   : self.__logPath,
                      "logQueries": self.__logQueries,
                      "activeDBs" : os.linesep.join((str(db) for db
                                                     in self.__activeDBs)),
                      "overwrite" : str(self.__overwrite)}


    def getOutputPath(self):
        '''
        :returns: the root path for storing files generated by scripts
        :rtype: str
        '''
        return self.__outputPath
    
    
    def getLogPath(self):
        '''
        :returns: the path for storing log files in
        :rtype: str
        '''
        return self.__logPath
    
    
    def isLoggingEnabled(self):
        '''
        :returns: whether the system should log all executed SQL
        :rtype: boolean
        '''
        return self.__logQueries
    
    
    def getActiveDBs(self):
        '''
        :returns: the list of databases to process
        :rtype: list of :class:`.QueryRunnerDatabase`
        '''
        return self.__activeDBs
    
    
    def isOverwrite(self):
        '''
        :returns: whether the system should overwrite any existing working
            copies of the target databases
        :rtype: boolean
        '''
        return self.__overwrite
    