# moja.cli in debug mode: moja_pyd
# moja.cli in release mode: moja_py
from moja_pyd import PyModule

# Module class - each of these could live in a separate file.
class Test(PyModule):

    def onLocalDomainInit(self):
        print("Hello from python!")
        
    def onTimingInit(self):
        var_name = "age"
        print(f"Getting variable {var_name}")
        var = self.getVariable(var_name)
        new_value = 1
        print(f"Setting {var_name} to {new_value}")
        var.set_value(new_value)

    def onTimingStep(self):
        var_name = "age"
        print(f"Getting variable {var_name}")
        var = self.getVariable(var_name)
        print(f"{var_name} = {var.value()}")

    def onOutputStep(self):
        pool_names = ["HardwoodMerch", "SoftwoodMerch"]
        for pool_name in pool_names:
            pool = self.getPool(pool_name)
            print(f"{pool_name} = {pool.value()}")
        
    def onTimingEndStep(self):
        op = self.createStockOperation({"test": "stuff"})
        from_pool = self.getPool("HardwoodMerch")
        to_pool = self.getPool("SoftwoodMerch")
        
        # Transfer all of HardwoodMerch to SoftwoodMerch.
        op.addTransfer(from_pool, to_pool, from_pool.value())

        # Or do the same thing using a proportional operation.
        # op = self.createProportionalOperation()
        # op.addTransfer(from_pool, to_pool, 1.0)
        
        self.submitOperation(op)


'''
Equivalent to the C++ library factory - key/value pairs serve the same purpose:
advertised module name (for JSON project config) to the module's python class.

For example, this file (the "library factory" module) is called pytest.py and
should be located along with the other DLLs and moja.cli.exe, with project config:

    "Libraries": {
       "pytest": "python"
    },
    .
    .
    .
    "Modules": {
        "Test": {
            "library": "pytest",
            "order": 13,
            "enabled": true
        }
    }
'''
modules = {
    "Test": Test
}
